#!/bin/bash

set -e

DOMAIN="${1}"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"
ENV_FILE="$PROJECT_DIR/website/.env"

if [ -z "$DOMAIN" ]; then
    echo "‚ùå Error: Domain name is required"
    echo "Usage: $0 <domain>"
    echo "Example: $0 u2048.hopto.org"
    exit 1
fi

echo "üöÄ Setting up Caddy for domain: $DOMAIN"

detect_environment() {
    if [[ "$DOMAIN" == "localhost" ]] || [[ "$DOMAIN" == "127.0.0.1" ]]; then
        echo "local"
    else
        echo "production"
    fi
}

ENV_TYPE=$(detect_environment)
echo "üìç Environment detected: $ENV_TYPE"

LINERA_PORT=8088
FRONTEND_PORT=8080
CADDY_HTTP_PORT=80
CADDY_HTTPS_PORT=443

if [ "$ENV_TYPE" == "local" ]; then
    echo "üìù Creating local development Caddyfile..."
    CADDYFILE_CONTENT="# Local Development Caddyfile
# Generated by setup_caddy.sh

{
    auto_https off
    admin localhost:2019
}

localhost:$CADDY_HTTP_PORT, localhost {
    # Frontend
    reverse_proxy localhost:$FRONTEND_PORT {
        header_up Host {host}
        header_up X-Real-IP {remote_host}
        header_up X-Forwarded-For {remote_host}
        header_up X-Forwarded-Proto {scheme}
    }
}

# Linera backend endpoint - direct access (no proxy)
# Backend runs on localhost:$LINERA_PORT and is accessed directly by frontend
"
else
    echo "üìù Creating production Caddyfile..."
    CADDYFILE_CONTENT="# Production Caddyfile
# Generated by setup_caddy.sh
# Domain: $DOMAIN

{
    email admin@$DOMAIN
}

# Main application - Frontend
$DOMAIN {
    # Automatic HTTPS via Let's Encrypt
    
    # Frontend application
    reverse_proxy localhost:$FRONTEND_PORT {
        header_up Host {host}
        header_up X-Real-IP {remote_host}
        header_up X-Forwarded-For {remote_host}
        header_up X-Forwarded-Proto {scheme}
    }
}

# API subdomain - Linera GraphQL Backend
api.$DOMAIN {
    # Linera backend with WebSocket support
    reverse_proxy localhost:$LINERA_PORT {
        header_up Host {host}
        header_up X-Real-IP {remote_host}
        header_up X-Forwarded-For {remote_host}
        header_up X-Forwarded-Proto {scheme}
        
        # WebSocket support for GraphQL subscriptions
        header_up Connection {>Connection}
        header_up Upgrade {>Upgrade}
    }
}
"
fi

echo "üíæ Writing Caddyfile..."
if [ -w /etc/caddy/Caddyfile ] 2>/dev/null || sudo -n true 2>/dev/null; then
    echo "$CADDYFILE_CONTENT" | sudo tee /etc/caddy/Caddyfile > /dev/null
    echo "‚úÖ Caddyfile written to /etc/caddy/Caddyfile"
else
    echo "‚ö†Ô∏è  No sudo access. Saving to ./Caddyfile.generated"
    echo "$CADDYFILE_CONTENT" > "$PROJECT_DIR/Caddyfile.generated"
    echo "üìã Please manually copy to /etc/caddy/Caddyfile:"
    echo "   sudo cp $PROJECT_DIR/Caddyfile.generated /etc/caddy/Caddyfile"
fi

echo ""
echo "üîß Updating environment variables in $ENV_FILE..."

if [ -f "$ENV_FILE" ]; then
    if [ "$ENV_TYPE" == "local" ]; then
        PUBLIC_WEBSITE="localhost"
        PUBLIC_PORT="$LINERA_PORT"
    else
        PUBLIC_WEBSITE="api.$DOMAIN"
        PUBLIC_PORT="443"
    fi
    
    sed -i.bak "s|^PUBLIC_WEBSITE=.*|PUBLIC_WEBSITE=$PUBLIC_WEBSITE|g" "$ENV_FILE"
    sed -i.bak "s|^PUBLIC_PORT=.*|PUBLIC_PORT=$PUBLIC_PORT|g" "$ENV_FILE"
    
    echo "‚úÖ Updated .env file:"
    echo "   PUBLIC_WEBSITE=$PUBLIC_WEBSITE"
    echo "   PUBLIC_PORT=$PUBLIC_PORT"
else
    echo "‚ö†Ô∏è  .env file not found at $ENV_FILE"
fi

echo ""
echo "üî• Configuring firewall..."
if command -v ufw &> /dev/null; then
    if sudo -n ufw status &> /dev/null; then
        sudo ufw allow 80/tcp comment 'Caddy HTTP' 2>/dev/null || echo "  Port 80 already allowed"
        sudo ufw allow 443/tcp comment 'Caddy HTTPS' 2>/dev/null || echo "  Port 443 already allowed"
        echo "‚úÖ Firewall rules configured (ufw)"
    fi
elif command -v firewall-cmd &> /dev/null; then
    if sudo -n firewall-cmd --state &> /dev/null; then
        sudo firewall-cmd --permanent --add-service=http 2>/dev/null || true
        sudo firewall-cmd --permanent --add-service=https 2>/dev/null || true
        sudo firewall-cmd --reload 2>/dev/null || true
        echo "‚úÖ Firewall rules configured (firewalld)"
    fi
else
    echo "‚ö†Ô∏è  No firewall detected or no sudo access"
fi

echo ""
echo "üîÑ Reloading Caddy service..."
if systemctl is-active --quiet caddy 2>/dev/null; then
    if sudo -n systemctl reload caddy 2>/dev/null; then
        echo "‚úÖ Caddy reloaded successfully"
    else
        echo "‚ö†Ô∏è  Failed to reload. Try manually: sudo systemctl reload caddy"
    fi
else
    echo "üì¶ Starting Caddy service..."
    if sudo -n systemctl start caddy 2>/dev/null; then
        sudo systemctl enable caddy 2>/dev/null || true
        echo "‚úÖ Caddy started and enabled"
    else
        echo "‚ö†Ô∏è  Failed to start. Try manually: sudo systemctl start caddy"
    fi
fi

echo ""
echo "üéâ Setup complete!"
echo ""
echo "üìä Configuration Summary:"
echo "   Domain: $DOMAIN"
echo "   Environment: $ENV_TYPE"
if [ "$ENV_TYPE" == "local" ]; then
    echo "   Frontend: http://localhost:$CADDY_HTTP_PORT"
    echo "   Backend: http://localhost:$LINERA_PORT"
else
    echo "   Frontend: https://$DOMAIN"
    echo "   Backend API: https://api.$DOMAIN"
fi
echo ""
echo "üîç Next steps:"
echo "   1. Ensure your Linera service is running on port $LINERA_PORT"
echo "   2. Ensure your frontend is running on port $FRONTEND_PORT"
if [ "$ENV_TYPE" == "production" ]; then
    echo "   3. Point your DNS records to this server:"
    echo "      - A record: $DOMAIN ‚Üí $(curl -s ifconfig.me 2>/dev/null || echo 'YOUR_SERVER_IP')"
    echo "      - A record: api.$DOMAIN ‚Üí $(curl -s ifconfig.me 2>/dev/null || echo 'YOUR_SERVER_IP')"
    echo "   4. Wait for DNS propagation (~5-30 minutes)"
    echo "   5. Caddy will automatically obtain SSL certificates"
fi
echo ""
echo "üìù Useful commands:"
echo "   Check Caddy status: sudo systemctl status caddy"
echo "   View Caddy logs: sudo journalctl -u caddy -f"
echo "   Test config: sudo caddy validate --config /etc/caddy/Caddyfile"
echo "   Reload config: sudo systemctl reload caddy"
